设计模式分类：
创建型模式 五种：
         工厂方法模式 抽象工厂模式 单例模式     建造者模式  原型模式
结构型模式 七种
         适配器模式   装饰者模式   代理模式    外观模式    桥接模式    组合模式  享元模式
行为型模式 十一种
         策略模式     模板方法模式 观察者模式  迭代器模式  责任链模式  命令模式
         备忘录模式   状态模式     访问者模式  中介者模式  解释器模式

设计模式六大原则：  开闭原则是目标  里氏替换原则是基础  依赖倒置原则是手段
     单一职责原则(SRP single responsibility principle):就一个类而言应该只有一个引起它变化的原因  实现高内聚低耦合

     开放关闭原则(OCP open closed principle):一个软件实体应该对扩展开放，对修改关闭，即在不修改原有代码的情况下进行扩展
                                             (软件实体可以指一个软件模块，或者一个由多个类组成的局部结构或者一个独立类)

     里氏替换原则(LSP liskov substitution principle):所有引用基类(父类)的地方必须能透明地使用其子类的对象
                                                     里氏替换原则是实现开闭原则的重要方式之一，
                                                     可以扩展父类功能，但是不能改变父类功能，尽量不要重写父类方法

     依赖倒置原则(DIP dependency inversion principle):抽象不应该依赖于细节，细节应该依赖于抽象
                                                     在变量类型声明 参数声明 方法返回值类型声明使用接口或者抽象类

     接口隔离原则(ISP interface segregation principle):使用多个专门的接口，而不使用单一的接口，即接口大小要适中，太小会接口泛滥，太大将违背接口隔离原则

     迪米特法则(LOD low of demeter):一个软件实体应当尽可能少地与其它实体发生相互作用,可以降低系统的耦合度，使类与类之间保持松散的耦合关系
                                     不要和陌生人说话，只与你的直接朋友通信等
                                           当一个模块需要修改时候，需要尽量少地影响其它模块，这样扩展起来会比较容易